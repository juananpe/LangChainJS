import { IVSDocument, IVSSimilaritySearchItem } from './types/IVSDocument';
import { IVSOptions } from './types/IVSOptions';
import { IVSSimilaritySearchParams } from './types/IVSSimilaritySearchParams';
export declare class VectorStorage<T> {
    private db;
    private documents;
    private readonly maxSizeInMB;
    private readonly debounceTime;
    private readonly openaiModel;
    private readonly openaiApiKey?;
    private readonly embedTextsFn;
    constructor(options?: IVSOptions);
    addText(text: string, metadata: T): Promise<IVSDocument<T>>;
    addTexts(texts: string[], metadatas: T[]): Promise<Array<IVSDocument<T>>>;
    similaritySearch(params: IVSSimilaritySearchParams): Promise<{
        similarItems: Array<IVSSimilaritySearchItem<T>>;
        query: {
            text: string;
            embedding: number[];
        };
    }>;
    private initDB;
    private addDocuments;
    private embedTexts;
    private embedText;
    private calculateMagnitude;
    private calculateSimilarityScores;
    private updateHitCounters;
    private loadFromIndexDbStorage;
    private saveToIndexDbStorage;
    private removeDocsLRU;
}
